<?xml version="1.0"?>
<language text="BasicScript">

  <parser>
    <commentline1 text="'"/>
    <commentline2 text="rem"/>
    <commentblock1 text="/\,/\"/>
    <commentblock2 text="/\,/\"/>
    <stringquotes text="&#34;"/>
    <hexsequence text="0x"/>
    <declarevars text="0"/>
    <skipeol text="0"/>
    <skipchar text="_"/>

    <keywords>
      <addressof/>
      <and/>
      <as/>
      <byref/>
      <byval/>
      <case/>
      <catch/>
      <delete/>
      <dim/>
      <do/>
      <else/>
      <elseif/>
      <end/>
      <endif/>
      <exit/>
      <finally/>
      <for/>
      <function/>
      <if/>
      <imports/>
      <is/>
      <loop/>
      <mod/>
      <new/>
      <next/>
      <not/>
      <or/>
      <rem/>
      <return/>
      <select/>
      <set/>
      <step/>
      <sub/>
      <then/>
      <to/>
      <try/>
      <wend/>
      <while/>
      <with/>
      <xor/>
    </keywords>

    <!-- Error messages -->

    <errors>
      <err1 text="Identifier expected"/>
      <err2 text="Expression expected"/>
      <err3 text="End of line expected"/>
      <err4 text="':' expected"/>
      <err5 text="';' expected"/>
      <err6 text="'.' expected"/>
      <err7 text="')' expected"/>
      <err8 text="']' expected"/>
      <err9 text="'=' expected"/>
      <err10 text="'TO' expected"/>
      <err11 text="'END' expected"/>
      <err12 text="'(' expected"/>
      <err13 text="'THEN' expected"/>
      <err14 text="'WHILE' expected"/>
      <err15 text="'CASE' expected"/>
      <err16 text="'SELECT' expected"/>
      <err17 text="'FINALLY' or 'CATCH' expected"/>
      <err18 text="'[' expected"/>
      <err19 text="'..' expected"/>
      <err20 text="'&#62;' expected"/>
      <err21 text="'WEND' expected"/>
      <err22 text="'NEXT' expected"/>
      <err23 text="'WITH' expected"/>
      <err24 text="'TRY' expected"/>
      <err25 text="'SUB' expected"/>
      <err26 text="'FUNCTION' expected"/>
      <err27 text="'ELSE' expected"/>
      <err28 text="'IF' expected"/>
    </errors>
  </parser>                     

  <!-- Map to internal types -->

  <types>
    <decimal type="extended"/>
  </types>

  <!-- empty element -->
  <empty/>

  <!-- Entry point for the syntax analyzer -->
  <!--    Program -> Statements            -->

  <program>
    <statements/>
  </program>

  <!--    Statements -> (EOL | StatementList EOL)...  -->

  <statements node="compoundstmt">
    <loop>
      <switch>
        <eol/>
        <sequence>
          <statementlist/>
          <eol err="err3"/>
        </sequence>
      </switch>
    </loop>
  </statements>

  <!--    StatementList -> Statement/':'...  -->

  <statementlist>
    <loop text=":">
      <statement/>
    </loop>
  </statementlist>

  <!--    ImportStmt -> IMPORTS (String/,)... -->

  <importstmt node="uses">
    <keyword text="IMPORTS"/>
    <loop text=",">
      <string add="file" err="err1"/>
    </loop>
  </importstmt>

  <!--    DimStmt -> DIM (VarDecl/',')... -->

  <dimstmt>
    <keyword text="DIM"/>
    <loop text=",">
      <vardecl/>
    </loop>
  </dimstmt>

  <!--    VarDecl -> Ident [Array] [AsClause] [InitValue]  -->

  <vardecl node="var">
    <ident add="ident" err="err1" term="1"/>
    <optional>
      <array/>
    </optional>
    <optional>
      <asclause/>
    </optional>
    <optional>
      <initvalue/>
    </optional>
  </vardecl>

  <!--    AsClause -> AS Ident  -->

  <asclause>
    <keyword text="AS"/>
    <ident add="type" err="err1"/>
  </asclause>
  
  <!--    Array -> '[' ArrayDim/','... ']'  -->

  <array node="array">
    <char text="["/>
    <loop text=",">
      <arraydim err="err2"/>
    </loop>
    <char text="]" err="err8"/>
  </array>

  <!--    ArrayDim -> Expression  -->

  <arraydim node="dim">
    <expression/>
  </arraydim>

  <!--    InitValue -> '=' Expression  -->

  <initvalue node="init">
    <char text="="/>
    <expression err="err2"/>
  </initvalue>

  <!--    Expression -> SimpleExpression [RelOp SimpleExpression]... -->

  <expression node="expr">
    <simpleexpression/>
    <optionalloop>
      <relop/>
      <simpleexpression/>
    </optionalloop>
  </expression>

  <!--    SimpleExpression -> ['-'] Term [AddOp Term]... -->

  <simpleexpression>
    <optional>
      <char text="-" add="op" addtext="unminus"/>
    </optional>
    <term/>
    <optionalloop>
      <addop/>
      <term/>
    </optionalloop>
  </simpleexpression>

  <!--    Term -> Factor [MulOp Factor]... -->

  <term>
    <factor/>
    <optionalloop>
      <mulop/>
      <factor/>
    </optionalloop>
  </term>

  <!--    Factor -> Designator                     -->
  <!--           -> UnsignedNumber                 -->
  <!--           -> String                         -->
  <!--           -> '(' Expression ')'             -->
  <!--           -> NOT Factor                     -->
  <!--           -> '[' SetConstructor ']'         -->
  <!--           -> NewOperator                    -->
  <!--           -> '<' FRString '>'               -->

  <factor>
    <switch>
      <designator/>
      <number add="number"/>
      <string add="string"/>
      <sequence>
        <char text="(" add="op"/>
        <expression err="err2"/>
        <char text=")" add="op" err="err7"/>
      </sequence>
      <sequence>
        <keyword text="NOT" add="op" addtext="not"/>
        <factor err="err2"/>
      </sequence>
      <sequence>
        <char text="["/>
        <setconstructor err="err2"/>
        <char text="]" err="err8"/>
      </sequence>
      <newoperator/>
      <sequence>
        <char text="&#60;"/>
        <frstring/>
        <char text="&#62;" err="err20"/>
      </sequence>
    </switch>
  </factor>

  <!--    SetConstructor -> SetNode/','...  -->

  <setconstructor node="set">
    <loop text=",">
      <setnode/>
    </loop>
  </setconstructor>

  <!--    SetNode -> Expression ['..' Expression]  -->

  <setnode>
    <expression/>
    <optional>
      <char text="."/>
      <char text="." add="range"/>
      <expression/>
    </optional>
  </setnode>

  <!--    NewOperator -> NEW Designator  -->

  <newoperator node="new">
    <keyword text="NEW"/>
    <designator err="err2"/>
  </newoperator>

  <!--    RelOp -> '>'   -->
  <!--          -> '<'   -->
  <!--          -> '<='  -->
  <!--          -> '>='  -->
  <!--          -> '<>'  -->
  <!--          -> '='   -->
  <!--          -> IN    -->
  <!--          -> IS    -->

  <relop>
    <switch>
      <sequence>
        <char text="&#62;"/>
        <char text="=" skip="0" add="op" addtext="&#62;="/>
      </sequence>
      <sequence>
        <char text="&#60;"/>
        <char text="&#62;" skip="0" add="op" addtext="&#60;&#62;"/>
      </sequence>
      <sequence>
        <char text="&#60;"/>
        <char text="=" skip="0" add="op" addtext="&#60;="/>
      </sequence>
      <char text="&#62;" add="op" addtext="&#62;"/>
      <char text="&#60;" add="op" addtext="&#60;"/>
      <char text="=" add="op" addtext="="/>
      <keyword text="IN" add="op" addtext="in"/>
      <keyword text="IS" add="op" addtext="is"/>
    </switch>
  </relop>

  <!--    AddOp -> '+'  -->
  <!--          -> '-'  -->
  <!--          -> '&'  -->
  <!--          -> OR   -->
  <!--          -> XOR  -->

  <addop>
    <switch>
      <char text="+" add="op"/>
      <char text="-" add="op"/>
      <char text="&#38;" add="op" addtext="strcat"/>
      <keyword text="OR" add="op" addtext="or"/>
      <keyword text="XOR" add="op" addtext="xor"/>
    </switch>
  </addop>

  <!--    MulOp -> '*'    -->
  <!--          -> '/'    -->
  <!--          -> '\'    -->
  <!--          -> MOD    -->
  <!--          -> AND    -->

  <mulop>
    <switch>
      <char text="*" add="op"/>
      <char text="/" add="op"/>
      <char text="\" add="op" addtext="div"/>
      <keyword text="MOD" add="op" addtext="mod"/>
      <keyword text="AND" add="op" addtext="and"/>
    </switch>
  </mulop>

  <!--    Designator -> [ADDRESSOF] Ident ['.' Keyword | '[' ExprList ']' | '(' [ExprList] ')']...  -->

  <designator node="dsgn">
    <optional>
      <keyword text="ADDRESSOF" add="addr"/>
    </optional>
    <ident add="node"/>
    <optionalloop>
      <switch>
        <sequence>
          <char text="."/>
          <keyword add="node"/>
        </sequence>
        <sequence>
          <char text="[" add="node"/>
          <exprlist err="err2"/>
          <char text="]" err="err8"/>
        </sequence>
        <sequence>
          <char text="("/>
          <optional>
            <exprlist/>
          </optional>
          <char text=")" err="err7"/>
        </sequence>
      </switch>
    </optionalloop>
  </designator>

  <!--    ExprList -> Expression/','...  -->

  <exprlist>
    <loop text=",">
      <expression/>
    </loop>
  </exprlist>

  <!--    Statement -> BreakStmt
                    -> CaseStmt
                    -> ContinueStmt
                    -> DeleteStmt
                    -> DimStmt 
                    -> DoStmt
                    -> ExitStmt
                    -> ForStmt
                    -> FuncStmt
                    -> IfStmt
                    -> ImportStmt 
                    -> ProcStmt
                    -> ReturnStmt
                    -> SetStmt
                    -> TryStmt
                    -> WhileStmt
                    -> WithStmt
                    -> AssignStmt
                    -> CallStmt  -->

  <statement>
    <switch>
      <breakstmt/>
      <casestmt/>
      <continuestmt/>
      <deletestmt/>
      <dimstmt/>
      <dostmt/>
      <exitstmt/>
      <forstmt/>
      <funcstmt/>
      <ifstmt/>
      <importstmt/>
      <procstmt/>
      <returnstmt/>
      <setstmt/>
      <trystmt/>
      <whilestmt/>
      <withstmt/>
      <assignstmt/>
      <callstmt/>
    </switch>
  </statement>

  <!--    BreakStmt -> BREAK  -->

  <breakstmt>
    <keyword text="BREAK" node="break"/>
  </breakstmt>
  
  <!--    ContinueStmt -> CONTINUE  -->

  <continuestmt>
    <keyword text="CONTINUE" node="continue"/>
  </continuestmt>
  
  <!--    ExitStmt -> EXIT  -->

  <exitstmt>
    <keyword text="EXIT" node="exit"/>
  </exitstmt>
  
  <!--    DeleteStmt -> DELETE Designator  -->

  <deletestmt node="delete">
    <keyword text="DELETE"/>
    <designator err="err2"/>
  </deletestmt>

  <!--    SetStmt -> SET AssignStmt  -->

  <setstmt node="assignstmt">
    <keyword text="SET"/>
    <assignstmt err="err2"/>
  </setstmt>

  <!--    AssignStmt -> Designator ['+'|'-'|'*'|'/']'=' Expression  -->

  <assignstmt node="assignstmt">
    <designator/>
    <switch>
      <sequence>
        <char text="+" add="modificator"/>
        <char text="=" skip="0"/>
      </sequence>
      <sequence>
        <char text="-" add="modificator"/>
        <char text="=" skip="0"/>
      </sequence>
      <sequence>
        <char text="*" add="modificator"/>
        <char text="=" skip="0"/>
      </sequence>
      <sequence>
        <char text="/" add="modificator"/>
        <char text="=" skip="0"/>
      </sequence>
      <char text="="/>
    </switch>
    <expression err="err2"/>
  </assignstmt>

  <!--    CallStmt -> Designator ['+''+'|'-''-']  -->

  <callstmt node="callstmt">
    <designator/>
    <optionalswitch>
      <sequence>
        <char text="+"/>
        <char text="+" skip="0" add="modificator"/>
      </sequence>
      <sequence>
        <char text="-"/>
        <char text="-" skip="0" add="modificator"/>
      </sequence>
    </optionalswitch>
  </callstmt>

  <!--    ReturnStmt -> RETURN [Expression]  -->

  <returnstmt node="return">
    <keyword text="RETURN"/>
    <optional>
      <expression/>
    </optional>
  </returnstmt>

  <!--    IfStmt -> IF Expression THEN ThenStmt  -->

  <ifstmt node="ifstmt">
    <keyword text="IF"/>
    <expression err="err2"/>
    <keyword text="THEN" err="err13"/>
    <thenstmt/>
  </ifstmt>

  <!--    ThenStmt -> EOL [Statements] [ElseIfStmt | ElseStmt] END IF  -->
  <!--             -> StatementList                                    -->

  <thenstmt>
    <switch>
      <sequence>
        <eol/>
        <optional>
          <statements node="thenstmt"/>
        </optional>
        <optionalswitch>
          <elseifstmt node="elsestmt"/>
          <elsestmt node="elsestmt"/>
        </optionalswitch>
        <keyword text="END" err="err11"/>
        <keyword text="IF" err="err28"/>
      </sequence>
      <statementlist node="thenstmt"/>
    </switch>
  </thenstmt>

  <!--    ElseIfStmt -> ELSEIF Expression THEN 
                        (EOL [Statements] [ElseIfStmt | ElseStmt] | Statement)  -->
    
  <elseifstmt node="ifstmt">
    <keyword text="ELSEIF"/>
    <expression err="err2"/>
    <keyword text="THEN" err="err13"/>
    <switch>
      <sequence>
        <eol/>
        <optional>
          <statements node="thenstmt"/>
        </optional>
        <optionalswitch>
          <elseifstmt node="elsestmt"/>
          <elsestmt node="elsestmt"/>
        </optionalswitch>
      </sequence>
      <statement node="thenstmt"/>
    </switch>
  </elseifstmt>

  <!--    ElseStmt -> ELSE (EOL [Statements] | Statement)  -->
    
  <elsestmt>
    <keyword text="ELSE"/>
    <switch>
      <sequence>
        <eol/>
        <optional>
          <statements/>
        </optional>
      </sequence>
      <statement/>
    </switch>
  </elsestmt>

  <!--    CaseStmt -> SELECT CASE Expression EOL 
                      (CaseSelector...) [CASE ELSE ':' Statements] END SELECT  -->

  <casestmt node="casestmt">
    <keyword text="SELECT"/>
    <keyword text="CASE" err="err15"/>
    <expression err="err2"/>
    <eol/>
    <loop>
      <caseselector/>
    </loop>
    <optional>
      <keyword text="CASE"/>
      <keyword text="ELSE" err="err27"/>
      <char text=":" err="err4"/>
      <statements/>
    </optional>
    <keyword text="END" err="err11"/>
    <keyword text="SELECT" err="err16"/>
  </casestmt>

  <!--    CaseSelector -> CASE SetConstructor ':' Statements -->

  <caseselector node="caseselector">
    <keyword text="CASE"/>
    <setconstructor/>
    <char text=":" err="err4"/>
    <statements/>
  </caseselector>

  <!--    DoStmt -> DO [Statements] LOOP (UNTIL | WHILE) Expression  -->

  <dostmt node="repeatstmt">
    <keyword text="DO"/>
    <optional>
      <statements/>
    </optional>
    <keyword text="LOOP"/>
    <switch>
      <sequence>
        <keyword text="UNTIL"/>
        <expression err="err2"/>
      </sequence>
      <sequence>
        <keyword text="WHILE" err="err14"/>
        <expression err="err2"/>
        <!-- emit inverse condition -->
        <empty add="inverse"/>
      </sequence>
    </switch>
  </dostmt>

  <!--    WhileStmt -> WHILE Expression [Statements] WEND  -->

  <whilestmt node="whilestmt">
    <keyword text="WHILE"/>
    <expression err="err2"/>
    <optional>
      <statements/>
    </optional>
    <keyword text="WEND" err="err21"/>
  </whilestmt>

  <!--    ForStmt -> FOR Ident '=' Expression TO Expression [STEP Expression] EOL 
                     [Statements] NEXT  -->

  <forstmt node="vbforstmt">
    <keyword text="FOR"/>
    <ident add="ident" err="err1"/>
    <char text="=" err="err9"/>
    <expression err="err2"/>
    <keyword text="TO" err="err10"/>
    <expression err="err2"/>
    <optional>
      <keyword text="STEP"/>
      <expression err="err2"/>
    </optional>
    <eol/>
    <optional>
      <statements/>
    </optional>
    <keyword text="NEXT" err="err22"/>
  </forstmt>

  <!--    TryStmt -> TRY Statements (FINALLY | CATCH) [Statements] END TRY -->

  <trystmt node="trystmt">
    <keyword text="TRY"/>
    <statements/>
    <switch err="err17">
      <sequence>
        <keyword text="FINALLY"/>
        <optional>
          <statements node="finallystmt"/>
        </optional>
      </sequence>
      <sequence>
        <keyword text="CATCH"/>
        <optional>
          <statements node="exceptstmt"/>
        </optional>
      </sequence>
    </switch>
    <keyword text="END"/>
    <keyword text="TRY" err="err24"/>
  </trystmt>

  <!--    WithStmt -> WITH Designator EOL Statements END WITH  -->

  <withstmt node="with">
    <keyword text="WITH"/>
    <designator err="err2"/>
    <eol/>
    <statements/>
    <keyword text="END"/>
    <keyword text="WITH" err="err23"/>
  </withstmt>

  <!--    ProcStmt -> SUB Ident [FormalParameters] EOL [Statements] END SUB -->

  <procstmt node="procedure">
    <keyword text="SUB"/>
    <ident add="name" err="err1"/>
    <optional>
      <formalparameters/>
    </optional>
    <eol/>
    <optional>
      <statements/>
    </optional>
    <keyword text="END"/>
    <keyword text="SUB" err="err25"/>
  </procstmt>

  <!--    FuncStmt -> FUNCTION Ident [FormalParameters] [AsClause] EOL 
                      [Statements] END FUNCTION  -->

  <funcstmt node="function">
    <keyword text="FUNCTION"/>
    <ident add="name" err="err1"/>
    <optional>
      <formalparameters/>
    </optional>
    <optional>
      <asclause/>
    </optional>
    <eol/>
    <optional>
      <statements/>
    </optional>
    <keyword text="END"/>
    <keyword text="FUNCTION" err="err26"/>
  </funcstmt>

  <!--    FormalParameters -> '(' [FormalParam/',']... ')'  -->

  <formalparameters node="parameters">
    <char text="("/>
    <optionalloop text=",">
      <formalparam/>
    </optionalloop>
    <char text=")" err="err7"/>
  </formalparameters>

  <!--    FormalParm -> [BYREF | BYVAL] VarDecl  -->

  <formalparam>
    <optionalswitch>
      <keyword text="BYREF" node="varparams"/>
      <keyword text="BYVAL"/>
    </optionalswitch>
    <vardecl/>
  </formalparam>

</language>
