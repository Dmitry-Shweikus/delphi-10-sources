<?xml version="1.0"?>
<language text="PascalScript">

  <parser>
    <commentline1 text="//"/>
    <commentblock1 text="{,}"/>
    <commentblock2 text="(*,*)"/>
    <stringquotes text="'"/>
    <hexsequence text="$"/>

    <keywords>
      <and/>
      <array/>
      <begin/>
      <break/>
      <case/>
      <const/>
      <continue/>
      <div/>
      <do/>
      <downto/>
      <else/>
      <end/>
      <except/>
      <exit/>
      <finally/>
      <for/>
      <function/>
      <goto/>
      <if/>
      <in/>
      <is/>
      <label/>
      <mod/>
      <not/>
      <of/>
      <or/>
      <procedure/>
      <program/>
      <repeat/>
      <shl/>
      <shr/>
      <then/>
      <to/>
      <try/>
      <until/>
      <uses/>
      <var/>
      <while/>
      <with/>
      <xor/>
    </keywords>

    <!-- Error messages -->

    <errors>
      <err1 text="Identifier expected"/>
      <err2 text="Expression expected"/>
      <err3 text="Statement expected"/>
      <err4 text="':' expected"/>
      <err5 text="';' expected"/>
      <err6 text="'.' expected"/>
      <err7 text="')' expected"/>
      <err8 text="']' expected"/>
      <err9 text="'=' expected"/>
      <err10 text="'BEGIN' expected"/>
      <err11 text="'END' expected"/>
      <err12 text="'OF' expected"/>
      <err13 text="'THEN' expected"/>
      <err14 text="'UNTIL' expected"/>
      <err15 text="'TO' or 'DOWNTO' expected"/>
      <err16 text="'DO' expected"/>
      <err17 text="'FINALLY' or 'EXCEPT' expected"/>
      <err18 text="'[' expected"/>
      <err19 text="'..' expected"/>
      <err20 text="'&#62;' expected"/>
    </errors>
  </parser>                     

  <!-- Map to internal types -->

  <types>
    <!-- no map entries because all internal types are Pascal types -->
  </types>

  <!-- empty element -->
  <empty/>

  <!-- Entry point for the syntax analyzer -->
  <!--    Program -> [PROGRAM Ident ';'] -->
  <!--               [UsesClause]        -->
  <!--               Block '.'           -->
  <program>
    <optional>
      <keyword text="PROGRAM"/>
      <ident err="err1"/>
      <char text=";" err="err5"/>
    </optional>
    <optional>
      <usesclause/>
    </optional>
    <block/>
    <char text="." err="err6"/>
  </program>

  <!--    UsesClause -> USES (String/',')... ';' -->

  <usesclause node="uses">
    <keyword text="USES"/>
    <loop text=",">
      <string add="file" err="err1"/>
    </loop>
    <char text=";" err="err5"/>
  </usesclause>

  <!--    Block -> [DeclSection]...   -->
  <!--             CompoundStmt       -->

  <block>
    <optionalloop>
      <declsection/>
    </optionalloop>
    <compoundstmt err="err10"/>
  </block>

  <!--    DeclSection -> ConstSection         -->
  <!--                -> VarSection           -->
  <!--                -> ProcedureDeclSection -->

  <declsection>
    <switch>
      <constsection/>
      <varsection/>
      <proceduredeclsection/>
    </switch>
  </declsection>

  <!--    ConstSection -> CONST ConstantDecl... -->

  <constsection>
    <keyword text="CONST"/>
    <loop>
      <constantdecl/>
    </loop>
  </constsection>

  <!--    ConstantDecl -> Ident '=' Expression ';' -->

  <constantdecl node="const">
    <ident add="ident" err="err1" term="1"/>
    <char text="=" err="err9"/>
    <expression err="err2"/>
    <char text=";" err="err5"/>
  </constantdecl>

  <!--    VarSection -> VAR (VarList ';')... -->

  <varsection>
    <keyword text="VAR"/>
    <loop>
      <varlist/>
      <char text=";" err="err5"/>
    </loop>
  </varsection>

  <!--    VarList -> (Ident/',')... ':' TypeIdent [InitValue] -->

  <varlist node="var">
    <loop text=",">
      <ident add="ident" err="err1" term="1"/>
    </loop>
    <char text=":" err="err4"/>
    <typeident err="err1"/>
    <optional>
      <initvalue/>
    </optional>
  </varlist>

  <!--    TypeIdent -> [Array] Ident  -->

  <typeident>
    <optional>
      <array/>
    </optional>
    <ident add="type"/>
  </typeident>

  <!--    Array -> ARRAY ['[' (ArrayDim/',')... ']'] OF  -->

  <array node="array">
    <keyword text="ARRAY"/>
    <optional>
      <char text="["/>
      <loop text=",">
        <arraydim err="err2"/>
      </loop>
      <char text="]" err="err8"/>
    </optional>
    <keyword text="OF" err="err12"/>
  </array>

  <!--    ArrayDim -> Expression..Expression  -->
  <!--             -> Expression              -->

  <arraydim node="dim">
    <switch>
      <sequence>
        <expression/>
        <char text="."/>
        <char text="." skip="0"/>
        <expression/>
      </sequence>
      <expression/>
    </switch>
  </arraydim>

  <!--    InitValue -> '=' Expression  -->

  <initvalue node="init">
    <char text="="/>
    <expression err="err2"/>
  </initvalue>

  <!--    Expression -> SimpleExpression [RelOp SimpleExpression]... -->

  <expression node="expr">
    <simpleexpression/>
    <optionalloop>
      <relop/>
      <simpleexpression/>
    </optionalloop>
  </expression>

  <!--    SimpleExpression -> ['-'] Term [AddOp Term]... -->

  <simpleexpression>
    <optional>
      <char text="-" add="op" addtext="unminus"/>
    </optional>
    <term/>
    <optionalloop>
      <addop/>
      <term/>
    </optionalloop>
  </simpleexpression>

  <!--    Term -> Factor [MulOp Factor]... -->

  <term>
    <factor/>
    <optionalloop>
      <mulop/>
      <factor/>
    </optionalloop>
  </term>

  <!--    Factor -> Designator                     -->
  <!--           -> UnsignedNumber                 -->
  <!--           -> String                         -->
  <!--           -> '(' Expression ')'             -->
  <!--           -> NOT Factor                     -->
  <!--           -> '[' SetConstructor ']'         -->
  <!--           -> '<' FRString '>'               -->

  <factor>
    <switch>
      <designator/>
      <number add="number"/>
      <string add="string"/>
      <sequence>
        <char text="(" add="op"/>
        <expression err="err2"/>
        <char text=")" add="op" err="err7"/>
      </sequence>
      <sequence>
        <keyword text="NOT" add="op" addtext="not"/>
        <factor err="err2"/>
      </sequence>
      <sequence>
        <char text="["/>
        <setconstructor err="err2"/>
        <char text="]" err="err8"/>
      </sequence>
      <sequence>
        <char text="&#60;"/>
        <frstring/>
        <char text="&#62;" err="err20"/>
      </sequence>
    </switch>
  </factor>


  <!--    SetConstructor -> SetNode/','...  -->

  <setconstructor node="set">
    <loop text=",">
      <setnode/>
    </loop>
  </setconstructor>

  <!--    SetNode -> Expression ['..' Expression]  -->

  <setnode>
    <expression/>
    <optional>
      <char text="." add="range"/>
      <char text="." err="err6"/>
      <expression/>
    </optional>
  </setnode>

  <!--    RelOp -> '>'   -->
  <!--          -> '<'   -->
  <!--          -> '<='  -->
  <!--          -> '>='  -->
  <!--          -> '<>'  -->
  <!--          -> '='   -->
  <!--          -> IN    -->
  <!--          -> IS    -->

  <relop>
    <switch>
      <sequence>
        <char text="&#62;"/>
        <char text="=" skip="0" add="op" addtext="&#62;="/>
      </sequence>
      <sequence>
        <char text="&#60;"/>
        <char text="&#62;" skip="0" add="op" addtext="&#60;&#62;"/>
      </sequence>
      <sequence>
        <char text="&#60;"/>
        <char text="=" skip="0" add="op" addtext="&#60;="/>
      </sequence>
      <char text="&#62;" add="op" addtext="&#62;"/>
      <char text="&#60;" add="op" addtext="&#60;"/>
      <char text="=" add="op" addtext="="/>
      <keyword text="IN" add="op" addtext="in"/>
      <keyword text="IS" add="op" addtext="is"/>
    </switch>
  </relop>

  <!--    AddOp -> '+'  -->
  <!--          -> '-'  -->
  <!--          -> OR   -->
  <!--          -> XOR  -->

  <addop>
    <switch>
      <char text="+" add="op"/>
      <char text="-" add="op"/>
      <keyword text="OR" add="op" addtext="or"/>
      <keyword text="XOR" add="op" addtext="xor"/>
    </switch>
  </addop>

  <!--    MulOp -> '*'    -->
  <!--          -> '/'    -->
  <!--          -> DIV    -->
  <!--          -> MOD    -->
  <!--          -> AND    -->
  <!--          -> SHL    -->
  <!--          -> SHR    -->

  <mulop>
    <switch>
      <char text="*" add="op"/>
      <char text="/" add="op"/>
      <keyword text="DIV" add="op" addtext="div"/>
      <keyword text="MOD" add="op" addtext="mod"/>
      <keyword text="AND" add="op" addtext="and"/>
      <keyword text="SHL" add="op" addtext="shl"/>
      <keyword text="SHR" add="op" addtext="shr"/>
    </switch>
  </mulop>

  <!--    Designator -> ['@'] Ident ['.' Keyword | '[' ExprList ']' | '(' ExprList ')']...  -->

  <designator node="dsgn">
    <optional>
      <char text="@" add="addr"/>
    </optional>
    <ident add="node"/>
    <optionalloop>
      <switch>
        <sequence>
          <char text="."/>
          <keyword add="node" err="err1"/>
        </sequence>
        <sequence>
          <char text="[" add="node"/>
          <exprlist err="err2"/>
          <char text="]" err="err8"/>
        </sequence>
        <sequence>
          <char text="("/>
          <exprlist err="err2"/>
          <char text=")" err="err7"/>
        </sequence>
      </switch>
    </optionalloop>
  </designator>

  <!--    ExprList -> [Expression/',']...  -->

  <exprlist>
    <optionalloop text=",">
      <expression/>
    </optionalloop>
  </exprlist>

  <!--    Statement -> [SimpleStatement | StructStmt]  -->

  <statement>
    <optionalswitch>
      <simplestatement/>
      <structstmt/>
    </optionalswitch>
  </statement>

  <!--    StmtList -> Statement/';'...  -->

  <stmtlist>
    <loop text=";">
      <statement/>
    </loop>
  </stmtlist>

  <!--    SimpleStatement -> Designator ':=' Expression     -->
  <!--                    -> Designator                     -->
  <!--                    -> BREAK | CONTINUE | EXIT        -->

  <simplestatement>
    <switch>
      <assignstmt/>
      <callstmt/>
      <switch>
        <keyword text="BREAK" node="break"/>
        <keyword text="CONTINUE" node="continue"/>
        <keyword text="EXIT" node="exit"/>
      </switch>
    </switch>
  </simplestatement>

  <assignstmt node="assignstmt">
    <designator/>
    <char text=":"/>
    <char text="=" skip="0" err="err9"/>
    <expression err="err2"/>
  </assignstmt>

  <callstmt node="callstmt">
    <designator/>
  </callstmt>

  <!--    StructStmt -> CompoundStmt        -->
  <!--               -> ConditionalStmt     -->
  <!--               -> LoopStmt            -->
  <!--               -> TryStmt             -->
  <!--               -> WithStmt            -->

  <structstmt>
    <switch>
      <compoundstmt/>
      <conditionalstmt/>
      <loopstmt/>
      <trystmt/>
      <withstmt/>
    </switch>
  </structstmt>

  <!--    CompoundStmt -> BEGIN StmtList END   -->

  <compoundstmt node="compoundstmt">
    <keyword text="BEGIN"/>
    <stmtlist/>
    <keyword text="END" err="err5"/>
  </compoundstmt>

  <!--    ConditionalStmt -> IfStmt     -->
  <!--                    -> CaseStmt   -->

  <conditionalstmt>
    <switch>
      <ifstmt/>
      <casestmt/>
    </switch>
  </conditionalstmt>

  <!--    IfStmt -> IF Expression THEN Statement [ELSE Statement]  -->

  <ifstmt node="ifstmt">
    <keyword text="IF"/>
    <expression err="err2"/>
    <keyword text="THEN" err="err13"/>
    <statement node="thenstmt"/>
    <optional>
      <keyword text="ELSE"/>
      <statement node="elsestmt"/>
    </optional>
  </ifstmt>

  <!--    CaseStmt -> CASE Expression OF (CaseSelector/';')... [ELSE Statement] [';'] END  -->

  <casestmt node="casestmt">
    <keyword text="CASE"/>
    <expression err="err2"/>
    <keyword text="OF" err="err12"/>
    <loop text=";" skip="1">
      <caseselector/>
    </loop>
    <optional>
      <keyword text="ELSE"/>
      <statement/>
    </optional>
    <optional>
      <char text=";"/>
    </optional>
    <keyword text="END" err="err11"/>
  </casestmt>

  <!--    CaseSelector -> SetConstructor ':' Statement  -->

  <caseselector node="caseselector">
    <setconstructor err="err2"/>
    <char text=":" err="err4"/>
    <statement/>
  </caseselector>

  <!--    LoopStmt -> RepeatStmt  -->
  <!--             -> WhileStmt   -->
  <!--             -> ForStmt     -->

  <loopstmt>
    <switch>
      <repeatstmt/>
      <whilestmt/>
      <forstmt/>
    </switch>
  </loopstmt>

  <!--    RepeatStmt -> REPEAT StmtList UNTIL Expression  -->

  <repeatstmt node="repeatstmt">
    <keyword text="REPEAT"/>
    <stmtlist/>
    <keyword text="UNTIL" err="err14"/>
    <expression err="err2"/>
  </repeatstmt>

  <!--    WhileStmt -> WHILE Expression DO Statement  -->

  <whilestmt node="whilestmt">
    <keyword text="WHILE"/>
    <expression err="err2"/>
    <keyword text="DO" err="err16"/>
    <statement/>
  </whilestmt>

  <!--    ForStmt -> FOR Ident ':=' Expression (TO | DOWNTO) Expression DO Statement  -->

  <forstmt node="forstmt">
    <keyword text="FOR"/>
    <ident add="ident" err="err1"/>
    <char text=":" err="err4"/>
    <char text="=" skip="0" err="err9"/>
    <expression err="err2"/>
    <switch err="err15">
      <keyword text="TO"/>
      <keyword text="DOWNTO" add="downto"/>
    </switch>
    <expression err="err2"/>
    <keyword text="DO" err="err16"/>
    <statement/>
  </forstmt>

  <!--    TryStmt -> TRY StmtList (FINALLY StmtList | EXCEPT StmtList) END  -->

  <trystmt node="trystmt">
    <keyword text="TRY"/>
    <stmtlist/>
    <switch err="err17">
      <sequence>
        <keyword text="FINALLY"/>
        <stmtlist node="finallystmt"/>
      </sequence>
      <sequence>
        <keyword text="EXCEPT"/>
        <stmtlist node="exceptstmt"/>
      </sequence>
    </switch>
    <keyword text="END" err="err11"/>
  </trystmt>

  <!--    WithStmt -> WITH (Designator/',')... DO Statement  -->

  <withstmt node="with">
    <keyword text="WITH"/>
    <loop text=",">
      <designator err="err2"/>
    </loop>
    <keyword text="DO" err="err16"/>
    <statement/>
  </withstmt>

  <!--    ProcedureDeclSection -> ProcedureDecl  -->
  <!--                         -> FunctionDecl   -->

  <proceduredeclsection>
    <switch>
      <proceduredecl/>
      <functiondecl/>
    </switch>
  </proceduredeclsection>

  <!--    ProcedureDecl -> ProcedureHeading ';'  -->
  <!--                     Block ';'             -->

  <proceduredecl node="procedure">
    <procedureheading/>
    <char text=";" err="err5"/>
    <block/>
    <char text=";" err="err5"/>
  </proceduredecl>

  <!--    ProcedureHeading -> PROCEDURE Ident [FormalParameters]  -->

  <procedureheading>
    <keyword text="PROCEDURE"/>
    <ident add="name" err="err1"/>
    <optional>
      <formalparameters/>
    </optional>
  </procedureheading>

  <!--    FunctionDecl -> FunctionHeading ';'  -->
  <!--                    Block ';'             -->

  <functiondecl node="function">
    <functionheading/>
    <char text=";" err="err5"/>
    <block/>
    <char text=";" err="err5"/>
  </functiondecl>

  <!--    FunctionHeading -> FUNCTION Ident [FormalParameters] ':' Ident  -->

  <functionheading>
    <keyword text="FUNCTION"/>
    <ident add="name" err="err1"/>
    <optional>
      <formalparameters/>
    </optional>
    <char text=":" err="err4"/>
    <ident add="type" err="err1"/>
  </functionheading>

  <!--    FormalParameters -> '(' (FormalParam/';')... ')'  -->

  <formalparameters node="parameters">
    <char text="("/>
    <loop text=";">
      <formalparam/>
    </loop>
    <char text=")" err="err7"/>
  </formalparameters>

  <!--    FormalParm -> [VAR | CONST] VarList  -->

  <formalparam>
    <optionalswitch>
      <keyword text="VAR" node="varparams"/>
      <keyword text="CONST"/>
    </optionalswitch>
    <varlist/>
  </formalparam>
</language>
